#include<iostream>
using namespace std;
class node{
public:
    int data;
    node*next;
    node(int data){
    this->data=data;
    this->next=NULL;
    }
};
class mylinkedlist{
public:
    node*head;
    node*tail;
mylinkedlist(){
this->head=NULL;
this->tail=NULL;
}
void insert_(int data){
node*n=new node(data);
if(!head){
    this->head=n;
    this->tail=n;
}else{
this->tail->next=n;
this->tail=n;
}
}
void display(){
node*t=head;
while(t){
    cout<<t->data;
    t=t->next;
}
}
node*partition_(node*head,node*tail){
node*pivot=head;
node*front=head;
while(front and front!=tail){
    if(front->data<tail->data){
        pivot=head;
        swap(front->data,head->data);
        head=head->next;
    }
    front=front->next;
}
swap(head->data,tail->data);
return pivot;
}
void quick(node*head,node*tail)
{
if(head==tail){
    return;
}
node*pivot=partition_(head,tail);
if(pivot and pivot->next){
this->quick(pivot->next,tail);
}
if(pivot and pivot!=tail){
this->quick(head,pivot);
}
}
};
int main(){
mylinkedlist obj;
obj.insert_(5);
obj.insert_(4);
obj.insert_(3);
obj.insert_(2);
obj.insert_(1);
obj.quick(obj.head,obj.tail);
obj.display();

return 0;
}

